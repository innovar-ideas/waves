// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(uuid())
  active                     Boolean                     @default(true)
  email                      String?                     @unique
  first_name                 String
  last_name                  String
  password                   String?
  phone_number               String?                     @unique
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime                    @updatedAt
  deleted_at                 DateTime?
  emergency_contact          EmergencyContact?
  roles                      UserRole[]
  events                     Event[]
  chat_members               ChatMember[]
  organization_id            String?
  organization               Organization?               @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  staffProfile               StaffProfile[]
  TimeOff                    TimeOff[]
  accounts                   Account[]
  fcmToken                   String? // to store fire base meassaging token
  approved_payrolls          Payroll[]
  leave_applications         LeaveApplication[]
  loan_applications          LoanApplication[]
  Message                    Message[]
  tasks                      Task[]                      @relation("TaskCreator")
  notification_recipients    NotificationRecipients[]    @relation("RecipientUser")
  notification_senders       NotificationRecipients[]    @relation("SenderUser")
  created_templates          PerformanceReviewTemplate[] @relation("CreatedTemplates") // Templates created by this user
  reviewer_reviews           PerformanceReview[]         @relation("Reviewer") // Reviews this user has completed
  performance_review_created PerformanceReview[]         @relation("CreatedBy") // Reviews of this user as a staff
  reviewed_reviews           PerformanceReview[]         @relation("ReviewedBy") // Reviews this user has reviewed
  created_policy_procedure   PolicyAndProcedure[]        @relation("CreatedPolicies")
  approved_policy_procedure  PolicyAndProcedure[]        @relation("ApprovedPolicies")
  preferences                Preference[]
  staff_tasks                StaffTask[]

  @@map("users")
}

model StaffRole {
  id              String         @id @default(uuid())
  active          Boolean        @default(true)
  description     String         @unique
  organization_id String?
  organization    Organization?  @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  deleted_at      DateTime?
  staff_profile   StaffProfile[]

  @@map("staff_roles")
}

model StaffProfile {
  id                   String              @id @default(uuid())
  user_id              String              @unique
  tin                  String?             @unique
  nin                  String?             @unique
  user                 User                @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  active               Boolean             @default(true)
  email                String?             @unique
  number_of_loans      Int?                @default(0)
  date_of_birth        DateTime?
  bank_account_no      String?             @unique
  bank_name            String?
  bank_id              String?             @unique
  bank                 Bank?               @relation(fields: [bank_id], references: [id])
  bank_account_name    String?
  passport_number      String?             @unique
  status               String?             @default("Active") //Active, Remote, OnLeave, Terminated
  passport_expiry_date DateTime?
  marital_status       String?
  profile_picture_url  String?
  documents_url        Json?
  position             String?
  skill                String?
  department           String?
  is_head_of_dept      Boolean?            @default(false)
  joined_at            DateTime?
  salary_basis         String?
  amount_per_month     Int?
  effective_date       DateTime?
  payment_type         String?
  team_designation_id  String?
  team_designation     TeamDesignation?    @relation(fields: [team_designation_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  deleted_at           DateTime?
  work_history         WorkHistory[]
  performance_reviews  PerformanceReview[]
  organization_id      String?
  organization         Organization?       @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  payroll_template_id  String?
  payroll_template     PayrollTemplate?    @relation(fields: [payroll_template_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  payrolls             Payroll[]
  time_offs            TimeOff[]
  contracts            Contract[]
  StaffRole            StaffRole?          @relation(fields: [staffRoleId], references: [id])
  staffRoleId          String?

  @@map("staff_profiles")
}

model WorkHistory {
  id               String       @id @default(uuid())
  staff_profile_id String
  staffProfile     StaffProfile @relation(fields: [staff_profile_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  job_title        String
  company_industry String?
  company_name     String?
  responsibilities String
  start_date       DateTime?
  end_date         DateTime?
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  deleted_at       DateTime?

  @@map("work_histories")
}

model Contract {
  id                String           @id @default(uuid())
  status            String           @default("pending") // in_review, active, ended
  staff_profile_id  String
  template_id       String
  name              String
  type              String?
  sign_before       DateTime?
  contract_duration DateTime?
  details           Json
  file              String?
  files             Json?
  accepted          Boolean          @default(false)
  staff_profile     StaffProfile     @relation(fields: [staff_profile_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  template          ContractTemplate @relation(fields: [template_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organization_id   String?
  organization      Organization?    @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  deleted_at        DateTime?

  @@map("contracts")
}

model ContractTemplate {
  id                String        @id @default(uuid())
  details           Json
  name              String
  type              String
  sign_before       Int?
  contract_duration Int?
  versions          Json?
  contract          Contract[]
  organization_id   String?
  organization      Organization? @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime?

  @@map("contract_templates")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  balance      Float         @default(0)
  active       Boolean       @default(true)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?
  user         User          @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id      String
  transactions Transaction[]
  // bank_account_number String?       @unique

  @@map("accounts")
}

model Transaction {
  id          String    @id @default(uuid())
  account_id  String
  account     Account   @relation(fields: [account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  amount      Float
  description String
  type        String // DEBIT, CREDIT
  category    String // LEVY, TAX, PENSION, VOUCHER_DENOMINATION
  meta_data   Json?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("transactions")
}

model Role {
  id           String     @id @default(uuid())
  name         String     @unique
  active       Boolean    @default(true)
  display_name String     @unique
  description  String?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?
  users        UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(uuid())
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  user_id    String
  role_name  String
  user       User      @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role       Role      @relation(fields: [role_name], references: [name], onUpdate: Cascade, onDelete: Cascade)

  @@unique(name: "unique_user_role", fields: [role_name, user_id])
  @@map("user_roles")
}

model Organization {
  id                             String                                @id @default(uuid())
  name                           String
  slug                           String                                @unique
  token                          String                                @unique
  created_at                     DateTime                              @default(now())
  updated_at                     DateTime                              @updatedAt
  deleted_at                     DateTime?
  performance_review_templates   PerformanceReviewTemplate[]
  performance_review_assignments PerformanceReviewTemplateAssignment[]
  performance_reviews            PerformanceReview[]
  User                           User[]
  StaffProfile                   StaffProfile[]
  StaffRole                      StaffRole[]
  PayrollTemplate                PayrollTemplate[]
  Payroll                        Payroll[]
  Contract                       Contract[]
  ContractTemplate               ContractTemplate[]
  LeaveSetting                   LeaveSetting[]
  LeaveApplication               LeaveApplication[]
  LoanApplication                LoanApplication[]
  LoanSetting                    LoanSetting[]
  teams                          Team[]
  teamDesignations               TeamDesignation[]
  events                         Event[]
  chats                          Chat[]
  MessageDelivery                MessageDelivery[]
  Message                        Message[]
  PolicyProcedure                PolicyAndProcedure[]
  LoanRepayment                  LoanRepayment[]
  banks                          Bank[]
  preferences                    Preference[]
  Task                           Task[]
  accounts                       Accounts[]
  budgets                        Budget[]
  invoices                       Invoice[]
  bills                          Bill[]
  payments                       Payment[]
  bankStatements                 BankStatement[]
  expenses                       Expense[]
  expense_categories             ExpenseCategory[]

  @@map("organizations")
}

model PerformanceReviewTemplate {
  id                  String                                @id @default(uuid())
  name                String?
  type                String // monthly, quaterly, annual, bi-annually
  metrics             Json
  organization_id     String
  organization        Organization                          @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_by_id       String // User ID of the HR/Admin who created the template
  created_by          User                                  @relation("CreatedTemplates", fields: [created_by_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at          DateTime                              @default(now())
  updated_at          DateTime                              @updatedAt
  deleted_at          DateTime?
  performance_reviews PerformanceReview[]
  assignedTeams       PerformanceReviewTemplateAssignment[]

  @@map("performance_templates")
}

model PerformanceReviewTemplateAssignment {
  id              String        @id @default(uuid())
  template_id     String
  team_id         String?
  role_level      Int?          @default(1)
  role_level_max  Int?
  role_level_min  Int?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  deleted_at      DateTime?
  organization_id String?
  organization    Organization? @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  template PerformanceReviewTemplate @relation(fields: [template_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team     Team?                     @relation(fields: [team_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("performance_review_template_assignments")
}

model PerformanceReview {
  id              String                    @id @default(uuid())
  template_id     String
  team_id         String?
  staff_id        String
  reviewer_id     String
  created_by      String
  organization_id String
  completed_at    DateTime?
  score           Float?
  feedback        Json?
  created_at      DateTime                  @default(now())
  updated_at      DateTime                  @updatedAt
  deleted_at      DateTime?
  reviewed_by_id  String?
  reviewed_by     User?                     @relation("ReviewedBy", fields: [reviewed_by_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  template        PerformanceReviewTemplate @relation(fields: [template_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team            Team?                     @relation(fields: [team_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  staff           StaffProfile              @relation(fields: [staff_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviewer        User                      @relation("Reviewer", fields: [reviewer_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdBy       User                      @relation("CreatedBy", fields: [created_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organization    Organization              @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("performance_reviews")
}

model TimeOff {
  id               String       @id @default(uuid())
  staff_profile_id String
  duration         Int // days
  start_date       DateTime
  end_date         DateTime
  description      String
  meta_data        Json?
  staff_profile    StaffProfile @relation(fields: [staff_profile_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  approved_by      String?
  approver         User?        @relation(fields: [approved_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  approved_at      DateTime?
  status           String       @default("pending")
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  deleted_at       DateTime?

  @@map("time_offs")
}

model PayrollTemplate {
  id              String         @id @default(uuid())
  organization_id String
  name            String
  data            Json? // will contain line items, taxes, deductables, bonuses
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  deleted_at      DateTime?
  payrolls        Payroll[]
  staff           StaffProfile[]
  organization    Organization   @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("payroll_templates")
}

model Payroll {
  id              String          @id @default(uuid())
  organization_id String?
  organization    Organization?   @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  data            Json?
  month           DateTime
  approved        Boolean         @default(false)
  approved_by_id  String?
  approved_by     User?           @relation(fields: [approved_by_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  generated       Boolean         @default(false)
  batch           String?         @unique // eg. 2025-JAN
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  status          String          @default("pending") // processing, awaiting_payment, paid, failed
  approval_status String?         @default("not_approved") // not_approved, partially_approved, approved
  staff_id        String
  staff           StaffProfile    @relation(fields: [staff_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  template_id     String
  template        PayrollTemplate @relation(fields: [template_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("payrolls")
}

model LeaveSetting {
  id                String             @id @default(uuid())
  name              String // Name of the leave type (e.g., Sick Leave, Annual Leave)
  type              String // Leave category (e.g., Paid, Unpaid)
  duration          Int // Maximum allowed duration in days
  applicable_to     String // "male", "female", "both"
  leave_application LeaveApplication[]
  role_level        Int?               @default(0)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?
  organization_id   String?
  organization      Organization?      @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("leave_settings")
}

model LeaveApplication {
  id               String        @id @default(uuid())
  user_id          String // Reference to the user applying for leave
  approval_level   Json?
  user             User          @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  leave_setting_id String // Reference to the leave setting
  leave_setting    LeaveSetting  @relation(fields: [leave_setting_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  start_date       DateTime // Leave start date
  end_date         DateTime // Leave end date
  status           String // "pending", "approved", "rejected"
  reason           String? // Optional reason for the leave
  reviewed_by      String? // Admin/Manager who reviewed the application
  reviewed_at      DateTime? // Date when the application was reviewed
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  deleted_at       DateTime?
  organization_id  String?
  organization     Organization? @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("leave_applications")
}

model LoanSetting {
  id                   String        @id @default(uuid())
  max_percentage       Float // Maximum percentage of salary a staff can borrow (e.g., 50%)
  max_repayment_months Int // Maximum repayment duration in months (e.g., 12 months)
  number_of_times      Int?          @default(0)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  deleted_at           DateTime?
  organization_id      String?
  organization         Organization? @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("loan_settings")
}

model LoanApplication {
  id                String          @id @default(uuid())
  user_id           String // Reference to the staff applying for the loan
  user              User            @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  amount            Float // Loan amount requested
  status            String // "pending", "approved", "rejected"
  approval_level    Json?
  is_disbursed      Boolean         @default(false) // Tracks if the loan has been disbursed
  reason            String? // Optional reason for the loan
  repayment_period  Int // Repayment period in months
  monthly_deduction Float? // Monthly deduction for repayment
  reviewed_by       String? // Admin/Manager who reviewed the application
  fully_paid        Boolean         @default(false) //
  loan_repayments   LoanRepayment[]
  reviewed_at       DateTime? // Date when the application was reviewed
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  deleted_at        DateTime?
  organization_id   String?
  organization      Organization?   @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("loan_applications")
}

model LoanRepayment {
  id                String          @id @default(uuid())
  loan_id           String // Reference to the loan
  loan              LoanApplication @relation(fields: [loan_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  repayment_date    DateTime // Date of repayment
  amount_paid       Float // Amount paid in this transaction
  balance_remaining Float // Balance remaining after this transaction
  payment_method    String // Method of payment (e.g., "deduction", "transfer", "in-person")
  remarks           String? // Optional notes (e.g., "via bank transfer")
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  deleted_at        DateTime?
  organization_id   String?
  organization      Organization?   @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("loan_repayments")
}

model Team {
  id              String    @id @default(uuid())
  name            String
  description     String?
  parent_team_id  String? // Parent Team for hierarchy
  organization_id String // Organization this team belongs to
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  organization     Organization         @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  parentTeam       Team?                @relation("TeamHierarchy", fields: [parent_team_id], references: [id], onDelete: SetNull)
  childTeams       Team[]               @relation("TeamHierarchy")
  policy_procedure PolicyAndProcedure[]

  designations                        TeamDesignation[]
  PerformanceReviewTemplateAssignment PerformanceReviewTemplateAssignment[]
  PerformanceReview                   PerformanceReview[]

  @@map("teams")
}

model Designation {
  id              String    @id @default(uuid())
  name            String
  description     String?
  quantity        Int // Number of people required for this designation
  job_description String? // Job description for this designation
  role_level      Int?      @default(1)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  teamDesignations TeamDesignation[]

  @@map("designations")
}

model TeamDesignation {
  id                   String         @id @default(uuid())
  team_id              String
  designation_id       String
  quantity             Int? // Number of positions for this designation in the team
  vacancies            Int?
  organization_id      String
  organization         Organization   @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team_job_description String? // Specific job description for the designation in the context of the team
  staffs               StaffProfile[]
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt
  deleted_at           DateTime?

  team        Team        @relation(fields: [team_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  designation Designation @relation(fields: [designation_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([team_id, designation_id]) // Ensure a designation is unique per team
  @@map("team_designations")
}

enum REPEAT {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  NONE
}

model Event {
  id               String       @id @default(uuid())
  name             String
  description      String?
  link             String?
  location         String?
  all_day          Boolean      @default(false)
  save_to_calendar Boolean      @default(false)
  repeat           REPEAT?
  users            User[]
  starts           DateTime
  ends             DateTime
  organization_id  String
  organization     Organization @relation(fields: [organization_id], references: [id])
  type             String
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  deleted_at       DateTime?

  @@map(name: "events")
}

enum MessageChannel {
  INTERNAL
  WHATSAPP
  EMAIL
  SMS
}

enum MessageStatus {
  DRAFT
  QUEUED
  SENT
  DELIVERED
  READ
  FAILED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM
}

model MessageDelivery {
  id              String         @id @default(cuid())
  message_id      String
  channel         MessageChannel
  status          MessageStatus  @default(QUEUED)
  external_id     String?
  sent_at         DateTime?
  delivered_at    DateTime?
  error           String?
  metadata        Json?
  organization_id String
  message         Message        @relation(fields: [message_id], references: [id])
  organization    Organization   @relation(fields: [organization_id], references: [id])

  @@unique([message_id, channel])
  @@map(name: "message_deliveries")
}

model Message {
  id              String            @id @default(cuid())
  content         Json
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  sender_id       String
  chat_id         String?
  deleted_at      DateTime?
  message_type    MessageType       @default(TEXT)
  organization_id String
  deliveries      MessageDelivery[]
  organization    Organization      @relation(fields: [organization_id], references: [id])
  sender          User              @relation(fields: [sender_id], references: [id])
  chat            Chat?             @relation("ChatMessages", fields: [chat_id], references: [id])
  read            Boolean           @default(false)

  @@map(name: "messages")
}

enum ChatRole {
  ADMIN
  MEMBER
}

enum ChatType {
  DIRECT
  GROUP
  BROADCAST
  COMPLAINT
  FEEDBACK
}

enum ChatStatus {
  DRAFT
  ACTIVE
  OPEN
  RESOLVED
}

model Chat {
  id              String       @id @default(cuid())
  name            String? // For group chats
  type            ChatType     @default(DIRECT) // "DIRECT", "GROUP", or "BROADCAST"
  status          ChatStatus   @default(DRAFT) // Add status to track if it's a draft
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  deleted_at      DateTime?
  organization_id String
  members         ChatMember[]
  messages        Message[]    @relation("ChatMessages")
  organization    Organization @relation(fields: [organization_id], references: [id])

  @@map(name: "chats")
}

model ChatMember {
  id        String   @id @default(cuid())
  user_id   String
  chat_id   String
  joined_at DateTime @default(now())
  role      ChatRole @default(MEMBER)
  user      User     @relation(fields: [user_id], references: [id])
  chat      Chat     @relation(fields: [chat_id], references: [id])

  @@unique([user_id, chat_id])
  @@map(name: "chat_members")
}

model Notification {
  id                String                   @id @default(cuid())
  notification_type String?
  title             String?
  message           String?
  deleted_at        DateTime?
  created_at        DateTime                 @default(now())
  status            String                   @default("pending") // pending, sent, failed
  is_read           Boolean                  @default(false) // has the user read the notification
  priority          Int                      @default(3) // 1, 2, 3, 4, 5 (1 is highest priority) how important is this notification
  source_type       String? // "SYSTEM", "USER", "ADMIN"
  action_url        String? // url to redirect to when the user clicks on the notification
  expires_at        DateTime? // date and time when the notification expires
  additional_data   Json? // additional data to send to the notification
  sent_at           DateTime? // date and time when the notification was sent  
  recipients        NotificationRecipients[]

  @@map(name: "notifications")
}

model NotificationRecipients {
  id              String       @id @default(cuid())
  recipient_id    String
  notification_id String
  sender_id       String?
  sender          User?        @relation("SenderUser", fields: [sender_id], references: [id])
  is_sender       Boolean      @default(false)
  is_admin        Boolean      @default(false)
  recipient       User         @relation("RecipientUser", fields: [recipient_id], references: [id])
  notification    Notification @relation(fields: [notification_id], references: [id])

  @@unique([recipient_id, notification_id])
  @@map(name: "notification_recipients")
}

enum PnPStatus {
  DRAFT // Policy/Procedure is still a draft
  PUBLISHED // Policy/Procedure is published
}

model PolicyAndProcedure {
  id                     String    @id @default(uuid())
  title                  String // Title of the policy/procedure
  content                String // Content of the policy/procedure
  status                 PnPStatus @default(DRAFT) // Status of the policy (DRAFT or PUBLISHED)
  organization_id        String? // Link to the organization
  team_id                String? // Optional link to the team (if team-specific)
  is_approved            Boolean   @default(false) // Approval status
  created_by             String // Creator's User ID
  approved_by            String? // Approver's User ID (if approved)
  year_validity_duration Int?      @default(1) // Number of years the policy/procedure is valid for
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  deleted_at             DateTime?

  organization Organization? @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team         Team?         @relation(fields: [team_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdBy    User          @relation("CreatedPolicies", fields: [created_by], references: [id], onUpdate: Cascade, onDelete: Cascade)
  approvedBy   User?         @relation("ApprovedPolicies", fields: [approved_by], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@map("policies_and_procedures")
}

model Bank {
  id              String        @id @default(cuid())
  name            String
  sort_code       String?
  staff           StaffProfile?
  organization_id String
  organization    Organization  @relation(fields: [organization_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  deleted_at      DateTime?

  @@unique([name, organization_id])
  @@map("banks")
}

model Preference {
  id              String        @id @default(uuid())
  organization_id String?
  user_id         String?
  name            String
  value           Json
  status          String        @default("new")
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organization    Organization? @relation(fields: [organization_id], references: [id])
  user            User?         @relation(fields: [user_id], references: [id])

  @@unique([name, organization_id, user_id])
  @@index([name, organization_id, user_id])
  @@map(name: "preferences")
}

model EmergencyContact {
  id             String    @id @default(uuid())
  active         Boolean   @default(true)
  name           String
  phone          String
  relationship   String
  user_id        String?   @unique
  street_address String
  city           String
  state          String
  country        String
  user           User?     @relation(fields: [user_id], references: [id])
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  @@index([deleted_at, active])
  @@map(name: "emergency_contacts")
}

model Task {
  id                     String       @id @default(uuid())
  title                  String
  description            String
  created_by_id          String
  organization_id        String
  is_repeated            Boolean      @default(false)
  start_date             DateTime?
  end_date               DateTime?
  instructions           Json?
  task_repeat_time_table Json?
  staff_tasks            StaffTask[]
  created_at             DateTime     @default(now())
  updated_at             DateTime?    @updatedAt
  deleted_at             DateTime?
  created_by_user        User         @relation("TaskCreator", fields: [created_by_id], references: [id])
  organization           Organization @relation(fields: [organization_id], references: [id])

  @@map(name: "tasks")
}

model StaffTask {
  id                     String    @id @default(uuid())
  task_id                String
  status                 String    @default("pending")
  created_at             DateTime  @default(now())
  updated_at             DateTime? @updatedAt
  deleted_at             DateTime?
  is_completed           Boolean   @default(false)
  task_repeat_time_table Json?
  instructions           Json? // can be a form or a text
  staff_feedback         Json?
  task                   Task      @relation(fields: [task_id], references: [id])
  user_id                String
  user                   User      @relation(fields: [user_id], references: [id])

  @@map(name: "staff_tasks")
}

enum TransactionType {
  INFLOW
  OUTFLOW
}

model Accounts {
  id              String    @id @default(cuid())
  account_name    String
  account_type_enum AccountTypeEnum  @default(INCOME)
  account_code    String
  description     String?
  // New fields for bank accounts
  account_number  String?
  bank_name       String?
  bank_branch     String?
  swift_code      String?
  routing_number  String?
  is_default      Boolean   @default(false)
  
  total_amount    Float     @default(0)
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  parent_id       String?
  parent_account  Accounts?  @relation("AccountHierarchy", fields: [parent_id], references: [id])
  sub_accounts    Accounts[] @relation("AccountHierarchy")
  account_items   AccountItem[]
  invoices        Invoice[] @relation(name: "AccountInvoices")
  bills           Bill[]    @relation(name: "AccountBills")
  bank_statements BankStatement[] @relation(name: "AccountBankStatements")
  // Track payments made to/from this account
  payments_received Payment[] @relation("AccountPayments")
  budget          Budget?   @relation(name: "BudgetExpenseAccount")
  created_at      DateTime  @default(now())
  deleted_at      DateTime?

  @@unique([organization_id, account_name], name: "unique_account")
  @@map(name: "accountss")
}

enum AccountTypeEnum {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
  BANK
  LOAN
  CREDIT_CARD
  FIXED_ASSET
 
}

model Budget {
  id                 String        @id @default(uuid())
  name               String
  budgeted_amount    Float
  amount_spent       Float
  balance            Float
  status             BudgetStatus  @default(NOT_APPROVED)
  organization_id    String
  organization       Organization   @relation(fields: [organization_id], references: [id])
  items              AccountItem[]
  expense_account_id String?       @unique
  expense_account    Accounts?      @relation("BudgetExpenseAccount", fields: [expense_account_id], references: [id])
  created_at         DateTime      @default(now())
  updated_at         DateTime?     @updatedAt
  deleted_at         DateTime?

  @@map(name: "budgets")
}

//Note that we are using this as the general Line Item Table
model AccountItem {
  id              String    @id @default(uuid())
  item_code       String    @default("100001")
  description     String
  budgeted_amount Float     @default(0)
  quantity        Int       @default(1)
  price           Float?
  amount          Float
  paid_in_by      String?
  assign_to       String?
  account_id      String?
  invoice_id      String?
  invoice         Invoice?  @relation(fields: [invoice_id], references: [id])
  bill_id         String?
  bill            Bill?     @relation(fields: [bill_id], references: [id])
  date            DateTime
  account         Accounts?  @relation(fields: [account_id], references: [id])
  budget_id       String?   @unique
  budget          Budget?   @relation(fields: [budget_id], references: [id])
  payment         Payment?  @relation(name: "PaymentAccountItem")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  @@map(name: "account_items")
}

enum BudgetStatus {
  APPROVED
  NOT_APPROVED
}


enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  CHEQUE    
}

enum BillStatus {
  DRAFT
  RECEIVED
  PAID
  PARTIALLY_PAID
  OVERDUE
  VOID
  PENDING
}
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  VOID
  PENDING
}
model Invoice {

  id              String    @id @default(cuid())
  invoice_number  String    @unique
  account_id      String?    // Income account
  account         Accounts?   @relation(fields: [account_id], references: [id], name: "AccountInvoices")
  customer_name   String
  customer_id     String?   // Optional customer reference
  amount          Float
  amount_paid     Float     @default(0)
  balance_due     Float     @default(0)
  due_date        DateTime
  status          InvoiceStatus
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  account_items   AccountItem[]
  payments        Payment[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

}

model Bill {

  id              String    @id @default(cuid())
  bill_number     String    @unique
  account_id      String?    // Expense account
  account         Accounts?   @relation(fields: [account_id], references: [id], name: "AccountBills")
  vendor_name     String
  vendor_id       String?   // Optional vendor reference
  amount          Float
  due_date        DateTime
  status          BillStatus
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  account_items   AccountItem[]
  payments        Payment[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

}

model Payment {

  id              String    @id @default(cuid())
  amount          Float
  payment_date    DateTime
  payment_method  PaymentMethod
  reference       String?
  bank_reference String?   // For matching with bank transactions
  description     String?
  transaction_type TransactionType
  reconciliation_date DateTime?
  reconciliation_batch String?
  // Link to source/destination account(bank)
  account_id      String?
  account         Accounts?  @relation("AccountPayments", fields: [account_id], references: [id])
  // Optional links to related records
  invoice_id      String?
  invoice         Invoice?  @relation(fields: [invoice_id], references: [id])
  bill_id         String?
  bill            Bill?     @relation(fields: [bill_id], references: [id])
  // Link to account item for detailed tracking
  account_item_id String? @unique
  account_item    AccountItem? @relation(name: "PaymentAccountItem", fields: [account_item_id], references: [id])
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  bank_statement_transaction BankStatementTransaction? @relation(name: "matched_payment")
  created_at      DateTime  @default(now())
  reconciled      Boolean   @default(false)
}

model BankStatement {
  id              String    @id @default(cuid())
  account_id      String    // Reference to bank account
  account         Accounts   @relation(fields: [account_id], references: [id], name: "AccountBankStatements")
  statement_date  DateTime  // Month/Year of statement
  file_url        String    // URL to stored PDF
  status          ReconciliationStatus
  opening_balance Float
  closing_balance Float
  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id])
  transactions    BankStatementTransaction[]
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
}

model BankStatementTransaction {
  id                String    @id @default(cuid())
  statement_id      String
  statement         BankStatement @relation(fields: [statement_id], references: [id])
  transaction_date  DateTime
  description       String
  reference         String?
  amount           Float
  transaction_type TransactionType
  bank_reference   String?   // For bank-specific transaction codes
  transaction_code String?   // For standardized transaction categorization
  matched_payment_id String?  @unique
  matched_payment   Payment?  @relation(name: "matched_payment", fields: [matched_payment_id], references: [id])
  reconciled        Boolean   @default(false)
  reconciliation_date DateTime?
  reconciliation_batch String?
  notes             String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@index([transaction_date])
  @@index([bank_reference])
  @@index([reconciliation_batch])
  @@index([reconciled, transaction_date])
}

enum ReconciliationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
}

model Expense {
  id              String          @id @default(uuid())
  organization_id String
  line_items      Json
  amount          Float
  description     String
  category_id     String
  created_by      String
  approved_by     String?
  disbursed_at    DateTime?
  approved_at     DateTime?
  status          String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  deleted_at      DateTime?
  organization    Organization     @relation(fields: [organization_id], references: [id])
  category        ExpenseCategory @relation(fields: [category_id], references: [id])

  @@map("expenses")
}

model ExpenseCategory {
  id              String      @id @default(uuid())
  organization_id String
  name            String
  description     String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime?
  organization    Organization @relation(fields: [organization_id], references: [id])
  expenses        Expense[]

  @@map("expense_categories")
}
